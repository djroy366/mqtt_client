!_TAG_FILE_FORMAT	2	/extended format; --format=1 will not append ;" to lines/
!_TAG_FILE_SORTED	1	/0=unsorted, 1=sorted, 2=foldcase/
!_TAG_PROGRAM_AUTHOR	Darren Hiebert	/dhiebert@users.sourceforge.net/
!_TAG_PROGRAM_NAME	Exuberant Ctags	//
!_TAG_PROGRAM_URL	http://ctags.sourceforge.net	/official site/
!_TAG_PROGRAM_VERSION	5.9~svn20110310	//
EXIT_FAILURE	mqtt_dj.h	41;"	d
GENERATE_ENUM	mqtt_dj.h	300;"	d
GENERATE_STRING	mqtt_dj.h	307;"	d
MQTTConnackReturnCode	mqtt_dj.h	/^enum MQTTConnackReturnCode {$/;"	g
MQTTConnectFlags	mqtt_dj.h	/^enum MQTTConnectFlags {$/;"	g
MQTTControlPacketType	mqtt_dj.h	/^  enum MQTTControlPacketType {$/;"	g
MQTTErrors	mqtt_dj.h	/^enum MQTTErrors {$/;"	g
MQTTPublishFlags	mqtt_dj.h	/^enum MQTTPublishFlags {$/;"	g
MQTTQueuedMessageState	mqtt_dj.h	/^enum MQTTQueuedMessageState {$/;"	g
MQTTSubackReturnCodes	mqtt_dj.h	/^enum MQTTSubackReturnCodes {$/;"	g
MQTT_BITFIELD_RULE_VIOLOATION	mqtt_dj.c	1032;"	d	file:
MQTT_CLIENT_TRY_PACK	mqtt_dj.c	335;"	d	file:
MQTT_CONNACK_ACCEPTED	mqtt_dj.h	/^    MQTT_CONNACK_ACCEPTED = 0u,$/;"	e	enum:MQTTConnackReturnCode
MQTT_CONNACK_REFUSED_BAD_USER_NAME_OR_PASSWORD	mqtt_dj.h	/^    MQTT_CONNACK_REFUSED_BAD_USER_NAME_OR_PASSWORD = 4u,$/;"	e	enum:MQTTConnackReturnCode
MQTT_CONNACK_REFUSED_IDENTIFIER_REJECTED	mqtt_dj.h	/^    MQTT_CONNACK_REFUSED_IDENTIFIER_REJECTED = 2u,$/;"	e	enum:MQTTConnackReturnCode
MQTT_CONNACK_REFUSED_NOT_AUTHORIZED	mqtt_dj.h	/^    MQTT_CONNACK_REFUSED_NOT_AUTHORIZED = 5u$/;"	e	enum:MQTTConnackReturnCode
MQTT_CONNACK_REFUSED_PROTOCOL_VERSION	mqtt_dj.h	/^    MQTT_CONNACK_REFUSED_PROTOCOL_VERSION = 1u,$/;"	e	enum:MQTTConnackReturnCode
MQTT_CONNACK_REFUSED_SERVER_UNAVAILABLE	mqtt_dj.h	/^    MQTT_CONNACK_REFUSED_SERVER_UNAVAILABLE = 3u,$/;"	e	enum:MQTTConnackReturnCode
MQTT_CONNECT_CLEAN_SESSION	mqtt_dj.h	/^    MQTT_CONNECT_CLEAN_SESSION = 2u,$/;"	e	enum:MQTTConnectFlags
MQTT_CONNECT_PASSWORD	mqtt_dj.h	/^    MQTT_CONNECT_PASSWORD = 64u,$/;"	e	enum:MQTTConnectFlags
MQTT_CONNECT_RESERVED	mqtt_dj.h	/^    MQTT_CONNECT_RESERVED = 1u,$/;"	e	enum:MQTTConnectFlags
MQTT_CONNECT_USER_NAME	mqtt_dj.h	/^    MQTT_CONNECT_USER_NAME = 128u$/;"	e	enum:MQTTConnectFlags
MQTT_CONNECT_WILL_FLAG	mqtt_dj.h	/^    MQTT_CONNECT_WILL_FLAG = 4u,$/;"	e	enum:MQTTConnectFlags
MQTT_CONNECT_WILL_QOS_0	mqtt_dj.h	/^    MQTT_CONNECT_WILL_QOS_0 = (0u & 0x03) << 3,$/;"	e	enum:MQTTConnectFlags
MQTT_CONNECT_WILL_QOS_1	mqtt_dj.h	/^    MQTT_CONNECT_WILL_QOS_1 = (1u & 0x03) << 3,$/;"	e	enum:MQTTConnectFlags
MQTT_CONNECT_WILL_QOS_2	mqtt_dj.h	/^    MQTT_CONNECT_WILL_QOS_2 = (2u & 0x03) << 3,$/;"	e	enum:MQTTConnectFlags
MQTT_CONNECT_WILL_RETAIN	mqtt_dj.h	/^    MQTT_CONNECT_WILL_RETAIN = 32u,$/;"	e	enum:MQTTConnectFlags
MQTT_CONTROL_CONNACK	mqtt_dj.h	/^    MQTT_CONTROL_CONNACK=2u,$/;"	e	enum:MQTTControlPacketType
MQTT_CONTROL_CONNECT	mqtt_dj.h	/^    MQTT_CONTROL_CONNECT=1u,$/;"	e	enum:MQTTControlPacketType
MQTT_CONTROL_DISCONNECT	mqtt_dj.h	/^    MQTT_CONTROL_DISCONNECT=14u$/;"	e	enum:MQTTControlPacketType
MQTT_CONTROL_PINGREQ	mqtt_dj.h	/^    MQTT_CONTROL_PINGREQ=12u,$/;"	e	enum:MQTTControlPacketType
MQTT_CONTROL_PINGRESP	mqtt_dj.h	/^    MQTT_CONTROL_PINGRESP=13u,$/;"	e	enum:MQTTControlPacketType
MQTT_CONTROL_PUBACK	mqtt_dj.h	/^    MQTT_CONTROL_PUBACK=4u,$/;"	e	enum:MQTTControlPacketType
MQTT_CONTROL_PUBCOMP	mqtt_dj.h	/^    MQTT_CONTROL_PUBCOMP=7u,$/;"	e	enum:MQTTControlPacketType
MQTT_CONTROL_PUBLISH	mqtt_dj.h	/^    MQTT_CONTROL_PUBLISH=3u,$/;"	e	enum:MQTTControlPacketType
MQTT_CONTROL_PUBREC	mqtt_dj.h	/^    MQTT_CONTROL_PUBREC=5u,$/;"	e	enum:MQTTControlPacketType
MQTT_CONTROL_PUBREL	mqtt_dj.h	/^    MQTT_CONTROL_PUBREL=6u,$/;"	e	enum:MQTTControlPacketType
MQTT_CONTROL_SUBACK	mqtt_dj.h	/^    MQTT_CONTROL_SUBACK=9u,$/;"	e	enum:MQTTControlPacketType
MQTT_CONTROL_SUBSCRIBE	mqtt_dj.h	/^    MQTT_CONTROL_SUBSCRIBE=8u,$/;"	e	enum:MQTTControlPacketType
MQTT_CONTROL_UNSUBACK	mqtt_dj.h	/^    MQTT_CONTROL_UNSUBACK=11u,$/;"	e	enum:MQTTControlPacketType
MQTT_CONTROL_UNSUBSCRIBE	mqtt_dj.h	/^    MQTT_CONTROL_UNSUBSCRIBE=10u,$/;"	e	enum:MQTTControlPacketType
MQTT_ERRORS_STR	mqtt_dj.c	/^static const char * const MQTT_ERRORS_STR[] = {$/;"	v	file:
MQTT_ERROR_UNKNOWN	mqtt_dj.h	/^    MQTT_ERROR_UNKNOWN=INT_MIN,$/;"	e	enum:MQTTErrors
MQTT_OK	mqtt_dj.h	/^    MQTT_OK = 1$/;"	e	enum:MQTTErrors
MQTT_PAL_HTONS	mqtt_dj.h	61;"	d
MQTT_PAL_MUTEX_INIT	mqtt_dj.h	69;"	d
MQTT_PAL_MUTEX_LOCK	mqtt_dj.h	70;"	d
MQTT_PAL_MUTEX_UNLOCK	mqtt_dj.h	71;"	d
MQTT_PAL_NTOHS	mqtt_dj.h	62;"	d
MQTT_PAL_TIME	mqtt_dj.h	64;"	d
MQTT_PROTOCOL_LEVEL	mqtt_dj.h	256;"	d
MQTT_PUBLISH_DUP	mqtt_dj.h	/^    MQTT_PUBLISH_DUP = 8u,$/;"	e	enum:MQTTPublishFlags
MQTT_PUBLISH_QOS_0	mqtt_dj.h	/^    MQTT_PUBLISH_QOS_0 = ((0u << 1) & 0x06),$/;"	e	enum:MQTTPublishFlags
MQTT_PUBLISH_QOS_1	mqtt_dj.h	/^    MQTT_PUBLISH_QOS_1 = ((1u << 1) & 0x06),$/;"	e	enum:MQTTPublishFlags
MQTT_PUBLISH_QOS_2	mqtt_dj.h	/^    MQTT_PUBLISH_QOS_2 = ((2u << 1) & 0x06),$/;"	e	enum:MQTTPublishFlags
MQTT_PUBLISH_QOS_MASK	mqtt_dj.h	/^    MQTT_PUBLISH_QOS_MASK = ((3u << 1) & 0x06),$/;"	e	enum:MQTTPublishFlags
MQTT_PUBLISH_RETAIN	mqtt_dj.h	/^    MQTT_PUBLISH_RETAIN = 0x01$/;"	e	enum:MQTTPublishFlags
MQTT_QUEUED_AWAITING_ACK	mqtt_dj.h	/^    MQTT_QUEUED_AWAITING_ACK,$/;"	e	enum:MQTTQueuedMessageState
MQTT_QUEUED_COMPLETE	mqtt_dj.h	/^    MQTT_QUEUED_COMPLETE$/;"	e	enum:MQTTQueuedMessageState
MQTT_QUEUED_UNSENT	mqtt_dj.h	/^    MQTT_QUEUED_UNSENT,$/;"	e	enum:MQTTQueuedMessageState
MQTT_SUBACK_FAILURE	mqtt_dj.h	/^    MQTT_SUBACK_FAILURE           = 128u$/;"	e	enum:MQTTSubackReturnCodes
MQTT_SUBACK_SUCCESS_MAX_QOS_0	mqtt_dj.h	/^    MQTT_SUBACK_SUCCESS_MAX_QOS_0 = 0u,$/;"	e	enum:MQTTSubackReturnCodes
MQTT_SUBACK_SUCCESS_MAX_QOS_1	mqtt_dj.h	/^    MQTT_SUBACK_SUCCESS_MAX_QOS_1 = 1u,$/;"	e	enum:MQTTSubackReturnCodes
MQTT_SUBACK_SUCCESS_MAX_QOS_2	mqtt_dj.h	/^    MQTT_SUBACK_SUCCESS_MAX_QOS_2 = 2u,$/;"	e	enum:MQTTSubackReturnCodes
MQTT_SUBSCRIBE_REQUEST_MAX_NUM_TOPICS	mqtt_dj.h	902;"	d
MQTT_UNSUBSCRIBE_REQUEST_MAX_NUM_TOPICS	mqtt_dj.h	937;"	d
__ALL_MQTT_ERRORS	mqtt_dj.h	/^    __ALL_MQTT_ERRORS(GENERATE_ENUM)$/;"	e	enum:MQTTErrors
__ALL_MQTT_ERRORS	mqtt_dj.h	262;"	d
__mqtt_next_pid	mqtt_dj.c	/^uint16_t __mqtt_next_pid(struct mqtt_client *client) {$/;"	f
__mqtt_pack_str	mqtt_dj.c	/^ssize_t __mqtt_pack_str(uint8_t *buf, const char* str) {$/;"	f
__mqtt_pack_uint16	mqtt_dj.c	/^ssize_t __mqtt_pack_uint16(uint8_t *buf, uint16_t integer)$/;"	f
__mqtt_packed_cstrlen	mqtt_dj.h	368;"	d
__mqtt_ping	mqtt_dj.c	/^enum MQTTErrors __mqtt_ping(struct mqtt_client *client) $/;"	f
__mqtt_puback	mqtt_dj.c	/^ssize_t __mqtt_puback(struct mqtt_client *client, uint16_t packet_id) {$/;"	f
__mqtt_pubcomp	mqtt_dj.c	/^ssize_t __mqtt_pubcomp(struct mqtt_client *client, uint16_t packet_id) {$/;"	f
__mqtt_pubrec	mqtt_dj.c	/^ssize_t __mqtt_pubrec(struct mqtt_client *client, uint16_t packet_id) {$/;"	f
__mqtt_pubrel	mqtt_dj.c	/^ssize_t __mqtt_pubrel(struct mqtt_client *client, uint16_t packet_id) {$/;"	f
__mqtt_recv	mqtt_dj.c	/^ssize_t __mqtt_recv(struct mqtt_client *client)$/;"	f
__mqtt_send	mqtt_dj.c	/^ssize_t __mqtt_send(struct mqtt_client *client) $/;"	f
__mqtt_unpack_uint16	mqtt_dj.c	/^uint16_t __mqtt_unpack_uint16(const uint8_t *buf)$/;"	f
_mqtt_pal_dummy	mqtt_dj.c	/^int _mqtt_pal_dummy;$/;"	v
application_message	mqtt_dj.h	/^    const void* application_message;$/;"	m	struct:mqtt_response_publish
application_message_size	mqtt_dj.h	/^    size_t application_message_size;$/;"	m	struct:mqtt_response_publish
client_daemon	mqtt_dj.h	/^    pthread_t client_daemon;$/;"	m	struct:mqtt_client
client_refresher	mqtt_dj.c	/^void* client_refresher(void* client)$/;"	f
connack	mqtt_dj.h	/^        struct mqtt_response_connack  connack;$/;"	m	union:mqtt_response::__anon1	typeref:struct:mqtt_response::__anon1::mqtt_response_connack
control_flags	mqtt_dj.h	/^    uint32_t  control_flags: 4;$/;"	m	struct:mqtt_fixed_header
control_type	mqtt_dj.h	/^    enum MQTTControlPacketType control_type;$/;"	m	struct:mqtt_fixed_header	typeref:enum:mqtt_fixed_header::MQTTControlPacketType
control_type	mqtt_dj.h	/^    enum MQTTControlPacketType control_type;$/;"	m	struct:mqtt_queued_message	typeref:enum:mqtt_queued_message::MQTTControlPacketType
control_type_is_valid	mqtt_dj.c	/^    uint8_t control_type_is_valid[16];$/;"	m	struct:mqtt_fixed_header_rules_s	file:
curr	mqtt_dj.h	/^        uint8_t *curr;$/;"	m	struct:mqtt_client::__anon2
curr	mqtt_dj.h	/^    uint8_t *curr;$/;"	m	struct:mqtt_message_queue
curr_sz	mqtt_dj.h	/^        size_t curr_sz;$/;"	m	struct:mqtt_client::__anon2
curr_sz	mqtt_dj.h	/^    size_t curr_sz;$/;"	m	struct:mqtt_message_queue
decoded	mqtt_dj.h	/^    } decoded;$/;"	m	struct:mqtt_response	typeref:union:mqtt_response::__anon1
dsp_client_daemon	mqtt_dj.c	/^pthread_t dsp_client_daemon;$/;"	v
dsp_socket	mqtt_dj.c	/^uint32_t dsp_socket;$/;"	v
dummy	mqtt_dj.h	/^  int dummy;$/;"	m	struct:mqtt_response_pingresp
dup_flag	mqtt_dj.h	/^    uint8_t dup_flag;$/;"	m	struct:mqtt_response_publish
error	mqtt_dj.h	/^    enum MQTTErrors error;$/;"	m	struct:mqtt_client	typeref:enum:mqtt_client::MQTTErrors
exit_example	mqtt_dj.c	/^void exit_example(int status, int sockfd, long unsigned int * client_daemon)$/;"	f
fixed_header	mqtt_dj.h	/^    struct mqtt_fixed_header fixed_header;$/;"	m	struct:mqtt_response	typeref:struct:mqtt_response::mqtt_fixed_header
inspector_callback	mqtt_dj.h	/^    enum MQTTErrors (*inspector_callback)(struct mqtt_client*);$/;"	m	struct:mqtt_client	typeref:enum:mqtt_client::inspector_callback
ip	mqtt_dj.h	/^    char *ip;$/;"	m	struct:mqtt_client
keep_alive	mqtt_dj.h	/^    uint16_t keep_alive;$/;"	m	struct:mqtt_client
main	dsp_server.c	/^int main(){$/;"	f
mask_required_flags	mqtt_dj.c	/^    uint8_t mask_required_flags[16];$/;"	m	struct:mqtt_fixed_header_rules_s	file:
mem_end	mqtt_dj.h	/^    void *mem_end;$/;"	m	struct:mqtt_message_queue
mem_size	mqtt_dj.h	/^        size_t mem_size;$/;"	m	struct:mqtt_client::__anon2
mem_start	mqtt_dj.h	/^        uint8_t *mem_start;$/;"	m	struct:mqtt_client::__anon2
mem_start	mqtt_dj.h	/^    void *mem_start;$/;"	m	struct:mqtt_message_queue
mq	mqtt_dj.h	/^    struct mqtt_message_queue mq;$/;"	m	struct:mqtt_client	typeref:struct:mqtt_client::mqtt_message_queue
mqtt_client	mqtt_dj.h	/^struct mqtt_client {$/;"	s
mqtt_connect	mqtt_dj.c	/^enum MQTTErrors mqtt_connect(struct mqtt_client *client,$/;"	f
mqtt_disconnect	mqtt_dj.c	/^enum MQTTErrors mqtt_disconnect(struct mqtt_client *client) $/;"	f
mqtt_dj_fini	mqtt_dj.c	/^void mqtt_dj_fini(){$/;"	f
mqtt_dj_init	mqtt_dj.c	/^enum MQTTErrors mqtt_dj_init(struct mqtt_client* client,void (*publish_response_callback)(void** state,struct mqtt_response_publish *publish)){$/;"	f
mqtt_error_str	mqtt_dj.c	/^const char* mqtt_error_str(enum MQTTErrors error) {$/;"	f
mqtt_fixed_header	mqtt_dj.h	/^struct mqtt_fixed_header {$/;"	s
mqtt_fixed_header_rule_violation	mqtt_dj.c	/^static ssize_t mqtt_fixed_header_rule_violation(const struct mqtt_fixed_header *fixed_header) {$/;"	f	file:
mqtt_fixed_header_rules	mqtt_dj.c	/^static const struct mqtt_fixed_header_rules_s mqtt_fixed_header_rules ={$/;"	v	typeref:struct:mqtt_fixed_header_rules_s	file:
mqtt_fixed_header_rules_s	mqtt_dj.c	/^struct mqtt_fixed_header_rules_s{$/;"	s	file:
mqtt_init	mqtt_dj.c	/^enum MQTTErrors mqtt_init(struct mqtt_client *client,$/;"	f
mqtt_init_reconnect	mqtt_dj.c	/^void mqtt_init_reconnect(struct mqtt_client *client,$/;"	f
mqtt_message_queue	mqtt_dj.h	/^struct mqtt_message_queue {$/;"	s
mqtt_mq_clean	mqtt_dj.c	/^void mqtt_mq_clean(struct mqtt_message_queue *mq) {$/;"	f
mqtt_mq_currsz	mqtt_dj.h	1165;"	d
mqtt_mq_find	mqtt_dj.c	/^struct mqtt_queued_message* mqtt_mq_find(const struct mqtt_message_queue *mq, enum MQTTControlPacketType control_type, const uint16_t *packet_id)$/;"	f
mqtt_mq_get	mqtt_dj.h	1153;"	d
mqtt_mq_init	mqtt_dj.c	/^void mqtt_mq_init(struct mqtt_message_queue *mq, void *buf, size_t bufsz) $/;"	f
mqtt_mq_length	mqtt_dj.h	1159;"	d
mqtt_mq_register	mqtt_dj.c	/^struct mqtt_queued_message* mqtt_mq_register(struct mqtt_message_queue *mq, size_t nbytes)$/;"	f
mqtt_pack_connection_request	mqtt_dj.c	/^ssize_t mqtt_pack_connection_request(uint8_t* buf, size_t bufsz,$/;"	f
mqtt_pack_disconnect	mqtt_dj.c	/^ssize_t mqtt_pack_disconnect(uint8_t *buf, size_t bufsz) {$/;"	f
mqtt_pack_fixed_header	mqtt_dj.c	/^ssize_t mqtt_pack_fixed_header(uint8_t *buf, size_t bufsz, const struct mqtt_fixed_header *fixed_header) {$/;"	f
mqtt_pack_ping_request	mqtt_dj.c	/^ssize_t mqtt_pack_ping_request(uint8_t *buf, size_t bufsz) {$/;"	f
mqtt_pack_publish_request	mqtt_dj.c	/^ssize_t mqtt_pack_publish_request(uint8_t *buf, size_t bufsz,$/;"	f
mqtt_pack_pubxxx_request	mqtt_dj.c	/^ssize_t mqtt_pack_pubxxx_request(uint8_t *buf, size_t bufsz, $/;"	f
mqtt_pack_subscribe_request	mqtt_dj.c	/^ssize_t mqtt_pack_subscribe_request(uint8_t *buf, size_t bufsz, unsigned int packet_id, ...) {$/;"	f
mqtt_pack_unsubscribe_request	mqtt_dj.c	/^ssize_t mqtt_pack_unsubscribe_request(uint8_t *buf, size_t bufsz, unsigned int packet_id, ...) {$/;"	f
mqtt_pal_mutex_t	mqtt_dj.h	/^    typedef pthread_mutex_t mqtt_pal_mutex_t;$/;"	t
mqtt_pal_recvall	mqtt_dj.c	/^ssize_t mqtt_pal_recvall(mqtt_pal_socket_handle fd, void* buf, size_t bufsz, int flags) {$/;"	f
mqtt_pal_sendall	mqtt_dj.c	/^ssize_t mqtt_pal_sendall(mqtt_pal_socket_handle fd, const void* buf, size_t len, int flags) {$/;"	f
mqtt_pal_socket_handle	mqtt_dj.h	/^    typedef int mqtt_pal_socket_handle;$/;"	t
mqtt_pal_time_t	mqtt_dj.h	/^    typedef time_t mqtt_pal_time_t;$/;"	t
mqtt_ping	mqtt_dj.c	/^enum MQTTErrors mqtt_ping(struct mqtt_client *client) {$/;"	f
mqtt_publish	mqtt_dj.c	/^enum MQTTErrors mqtt_publish(struct mqtt_client *client,$/;"	f
mqtt_queued_message	mqtt_dj.h	/^struct mqtt_queued_message {$/;"	s
mqtt_reconnect	mqtt_dj.c	/^enum MQTTErrors mqtt_reconnect(struct mqtt_client *client)$/;"	f
mqtt_reinit	mqtt_dj.c	/^void mqtt_reinit(struct mqtt_client* client,$/;"	f
mqtt_response	mqtt_dj.h	/^struct mqtt_response {$/;"	s
mqtt_response_connack	mqtt_dj.h	/^struct mqtt_response_connack {$/;"	s
mqtt_response_pingresp	mqtt_dj.h	/^struct mqtt_response_pingresp {$/;"	s
mqtt_response_puback	mqtt_dj.h	/^struct mqtt_response_puback {$/;"	s
mqtt_response_pubcomp	mqtt_dj.h	/^struct mqtt_response_pubcomp {$/;"	s
mqtt_response_publish	mqtt_dj.h	/^struct mqtt_response_publish {$/;"	s
mqtt_response_pubrec	mqtt_dj.h	/^struct mqtt_response_pubrec {$/;"	s
mqtt_response_pubrel	mqtt_dj.h	/^struct mqtt_response_pubrel {$/;"	s
mqtt_response_suback	mqtt_dj.h	/^struct mqtt_response_suback {$/;"	s
mqtt_response_unsuback	mqtt_dj.h	/^struct mqtt_response_unsuback {$/;"	s
mqtt_subscribe	mqtt_dj.c	/^enum MQTTErrors mqtt_subscribe(struct mqtt_client *client,$/;"	f
mqtt_sync	mqtt_dj.c	/^enum MQTTErrors mqtt_sync(struct mqtt_client *client) {$/;"	f
mqtt_unpack_connack_response	mqtt_dj.c	/^ssize_t mqtt_unpack_connack_response(struct mqtt_response *mqtt_response, const uint8_t *buf) {$/;"	f
mqtt_unpack_fixed_header	mqtt_dj.c	/^ssize_t mqtt_unpack_fixed_header(struct mqtt_response *response, const uint8_t *buf, size_t bufsz) {$/;"	f
mqtt_unpack_publish_response	mqtt_dj.c	/^ssize_t mqtt_unpack_publish_response(struct mqtt_response *mqtt_response, const uint8_t *buf)$/;"	f
mqtt_unpack_pubxxx_response	mqtt_dj.c	/^ssize_t mqtt_unpack_pubxxx_response(struct mqtt_response *mqtt_response, const uint8_t *buf) $/;"	f
mqtt_unpack_response	mqtt_dj.c	/^ssize_t mqtt_unpack_response(struct mqtt_response* response, const uint8_t *buf, size_t bufsz) {$/;"	f
mqtt_unpack_suback_response	mqtt_dj.c	/^ssize_t mqtt_unpack_suback_response (struct mqtt_response *mqtt_response, const uint8_t *buf) {$/;"	f
mqtt_unpack_unsuback_response	mqtt_dj.c	/^ssize_t mqtt_unpack_unsuback_response(struct mqtt_response *mqtt_response, const uint8_t *buf) $/;"	f
mqtt_unsubscribe	mqtt_dj.c	/^enum MQTTErrors mqtt_unsubscribe(struct mqtt_client *client,$/;"	f
mutex	mqtt_dj.h	/^    mqtt_pal_mutex_t mutex;$/;"	m	struct:mqtt_client
num_return_codes	mqtt_dj.h	/^    size_t num_return_codes;$/;"	m	struct:mqtt_response_suback
number_of_keep_alives	mqtt_dj.h	/^    int number_of_keep_alives;$/;"	m	struct:mqtt_client
number_of_timeouts	mqtt_dj.h	/^    int number_of_timeouts;$/;"	m	struct:mqtt_client
open_nb_socket	mqtt_dj.c	/^int open_nb_socket(const char* addr, const char* port) {$/;"	f
packet_id	mqtt_dj.h	/^    uint16_t packet_id;$/;"	m	struct:mqtt_queued_message
packet_id	mqtt_dj.h	/^    uint16_t packet_id;$/;"	m	struct:mqtt_response_puback
packet_id	mqtt_dj.h	/^    uint16_t packet_id;$/;"	m	struct:mqtt_response_pubcomp
packet_id	mqtt_dj.h	/^    uint16_t packet_id;$/;"	m	struct:mqtt_response_publish
packet_id	mqtt_dj.h	/^    uint16_t packet_id;$/;"	m	struct:mqtt_response_pubrec
packet_id	mqtt_dj.h	/^    uint16_t packet_id;$/;"	m	struct:mqtt_response_pubrel
packet_id	mqtt_dj.h	/^    uint16_t packet_id;$/;"	m	struct:mqtt_response_suback
packet_id	mqtt_dj.h	/^    uint16_t packet_id;$/;"	m	struct:mqtt_response_unsuback
password	mqtt_dj.h	/^    char *password;$/;"	m	struct:mqtt_client
pid_lfsr	mqtt_dj.h	/^    uint16_t pid_lfsr;$/;"	m	struct:mqtt_client
pingresp	mqtt_dj.h	/^        struct mqtt_response_pingresp pingresp;$/;"	m	union:mqtt_response::__anon1	typeref:struct:mqtt_response::__anon1::mqtt_response_pingresp
port	mqtt_dj.h	/^    char *port;$/;"	m	struct:mqtt_client
pub	dsp_server.c	/^struct mqtt_client* pub;$/;"	v	typeref:struct:mqtt_client
pub_or_sub	mqtt_dj.h	/^    bool pub_or_sub; \/\/ 1 for pub and 0 for sub$/;"	m	struct:mqtt_client
puback	mqtt_dj.h	/^        struct mqtt_response_puback   puback;$/;"	m	union:mqtt_response::__anon1	typeref:struct:mqtt_response::__anon1::mqtt_response_puback
pubcomp	mqtt_dj.h	/^        struct mqtt_response_pubcomp  pubcomp;$/;"	m	union:mqtt_response::__anon1	typeref:struct:mqtt_response::__anon1::mqtt_response_pubcomp
publish	dsp_server.c	/^void publish(struct mqtt_client *client,char *topic,char* buffer){$/;"	f
publish	mqtt_dj.h	/^        struct mqtt_response_publish  publish;$/;"	m	union:mqtt_response::__anon1	typeref:struct:mqtt_response::__anon1::mqtt_response_publish
publish_callback1	dsp_server.c	/^void publish_callback1(void** unused, struct mqtt_response_publish *published)$/;"	f
publish_response_callback	mqtt_dj.h	/^    void (*publish_response_callback)(void** state, struct mqtt_response_publish *publish);$/;"	m	struct:mqtt_client
publish_response_callback_state	mqtt_dj.h	/^    void* publish_response_callback_state;$/;"	m	struct:mqtt_client
pubrec	mqtt_dj.h	/^        struct mqtt_response_pubrec   pubrec;$/;"	m	union:mqtt_response::__anon1	typeref:struct:mqtt_response::__anon1::mqtt_response_pubrec
pubrel	mqtt_dj.h	/^        struct mqtt_response_pubrel   pubrel;$/;"	m	union:mqtt_response::__anon1	typeref:struct:mqtt_response::__anon1::mqtt_response_pubrel
qos_level	mqtt_dj.h	/^    uint8_t qos_level;$/;"	m	struct:mqtt_response_publish
queue_tail	mqtt_dj.h	/^    struct mqtt_queued_message *queue_tail;$/;"	m	struct:mqtt_message_queue	typeref:struct:mqtt_message_queue::mqtt_queued_message
reconnect_callback	mqtt_dj.h	/^    void (*reconnect_callback)(struct mqtt_client*, void**);$/;"	m	struct:mqtt_client
reconnect_state	mqtt_dj.h	/^    void* reconnect_state;$/;"	m	struct:mqtt_client
recv_buffer	mqtt_dj.h	/^    } recv_buffer;$/;"	m	struct:mqtt_client	typeref:struct:mqtt_client::__anon2
recvbuf	mqtt_dj.h	/^    uint8_t recvbuf[1024]; $/;"	m	struct:mqtt_client
remaining_length	mqtt_dj.h	/^    uint32_t remaining_length;$/;"	m	struct:mqtt_fixed_header
required_flags	mqtt_dj.c	/^    uint8_t required_flags[16];$/;"	m	struct:mqtt_fixed_header_rules_s	file:
response_timeout	mqtt_dj.h	/^    int response_timeout;$/;"	m	struct:mqtt_client
retain_flag	mqtt_dj.h	/^    uint8_t retain_flag;$/;"	m	struct:mqtt_response_publish
return_code	mqtt_dj.h	/^    enum MQTTConnackReturnCode return_code;$/;"	m	struct:mqtt_response_connack	typeref:enum:mqtt_response_connack::MQTTConnackReturnCode
return_codes	mqtt_dj.h	/^    const uint8_t *return_codes;$/;"	m	struct:mqtt_response_suback
send_offset	mqtt_dj.h	/^    size_t send_offset;$/;"	m	struct:mqtt_client
sendbuf	mqtt_dj.h	/^    char sendbuf[3048]; $/;"	m	struct:mqtt_client
session_present_flag	mqtt_dj.h	/^    uint8_t session_present_flag;$/;"	m	struct:mqtt_response_connack
size	mqtt_dj.h	/^    size_t size;$/;"	m	struct:mqtt_queued_message
socketfd	mqtt_dj.h	/^    mqtt_pal_socket_handle socketfd;$/;"	m	struct:mqtt_client
sockfd	mqtt_dj.h	/^    int sockfd;$/;"	m	struct:mqtt_client
start	mqtt_dj.h	/^    uint8_t *start;$/;"	m	struct:mqtt_queued_message
state	mqtt_dj.h	/^    enum MQTTQueuedMessageState state;$/;"	m	struct:mqtt_queued_message	typeref:enum:mqtt_queued_message::MQTTQueuedMessageState
sub	dsp_server.c	/^struct mqtt_client* sub;$/;"	v	typeref:struct:mqtt_client
suback	mqtt_dj.h	/^        struct mqtt_response_suback   suback;$/;"	m	union:mqtt_response::__anon1	typeref:struct:mqtt_response::__anon1::mqtt_response_suback
time_of_last_send	mqtt_dj.h	/^    mqtt_pal_time_t time_of_last_send;$/;"	m	struct:mqtt_client
time_sent	mqtt_dj.h	/^    mqtt_pal_time_t time_sent;$/;"	m	struct:mqtt_queued_message
topic	mqtt_dj.h	/^    char *topic;$/;"	m	struct:mqtt_client
topic_name	mqtt_dj.h	/^    const void* topic_name;$/;"	m	struct:mqtt_response_publish
topic_name_size	mqtt_dj.h	/^    uint16_t topic_name_size;$/;"	m	struct:mqtt_response_publish
typical_response_time	mqtt_dj.h	/^    float typical_response_time;$/;"	m	struct:mqtt_client
unsuback	mqtt_dj.h	/^        struct mqtt_response_unsuback unsuback;$/;"	m	union:mqtt_response::__anon1	typeref:struct:mqtt_response::__anon1::mqtt_response_unsuback
user_name	mqtt_dj.h	/^    char *user_name;$/;"	m	struct:mqtt_client
